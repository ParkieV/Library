"""initial

Revision ID: 0d4f77f0ce98
Revises: 
Create Date: 2023-07-10 04:44:52.045429

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0d4f77f0ce98'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_book_queries_id', table_name='book_queries')
    op.drop_table('book_queries')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_books_id', table_name='books')
    op.drop_table('books')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('books',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('books_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('authors', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id_taken', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_reserved_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date_start_reserve', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('date_start_use', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('date_finish_use', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id_taken'], ['users.id'], name='books_user_id_taken_fkey'),
    sa.ForeignKeyConstraint(['user_reserved_id'], ['users.id'], name='books_user_reserved_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='books_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_books_id', 'books', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('surname', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('user_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('book_id_taken', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reserved_book_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('time_token_create', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['book_id_taken'], ['books.id'], name='users_book_id_taken_fkey'),
    sa.ForeignKeyConstraint(['reserved_book_id'], ['books.id'], name='users_reserved_book_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('hashed_password', name='users_hashed_password_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_table('book_queries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('book_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('type_order', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('type_query', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name='book_queries_book_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='book_queries_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='book_queries_pkey')
    )
    op.create_index('ix_book_queries_id', 'book_queries', ['id'], unique=False)
    # ### end Alembic commands ###
